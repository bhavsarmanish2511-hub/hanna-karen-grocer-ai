import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Bot, Send, CheckCircle, Clock, Baby } from 'lucide-react';

interface GroceryItem {
  id: string;
  name: string;
  category: string;
  priority: 'high' | 'medium' | 'low';
  forRon?: boolean;
  reason: string;
  estimatedPrice?: string;
}

const groceryList: GroceryItem[] = [
  { id: '1', name: 'Organic Milk', category: 'Dairy', priority: 'high', reason: 'Running low (1.2L left)', estimatedPrice: '$4.50' },
  { id: '2', name: 'Baby Carrots', category: 'Vegetables', priority: 'high', reason: 'Expiring in 2 days', estimatedPrice: '$2.80' },
  { id: '3', name: 'Apple Juice', category: 'Beverages', priority: 'medium', forRon: true, reason: 'Ron\'s favorite drink', estimatedPrice: '$3.20' },
  { id: '4', name: 'Honey', category: 'Pantry', priority: 'high', reason: 'Out of stock', estimatedPrice: '$6.90' },
  { id: '5', name: 'Kids Cereal', category: 'Breakfast', priority: 'medium', forRon: true, reason: 'Ron\'s breakfast', estimatedPrice: '$4.20' },
  { id: '6', name: 'Ground Coffee', category: 'Beverages', priority: 'medium', reason: 'Low stock (200g left)', estimatedPrice: '$8.50' },
  { id: '7', name: 'Greek Yogurt', category: 'Dairy', priority: 'low', reason: 'Backup supply', estimatedPrice: '$5.20' },
];

export const GroceryList = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSent, setIsSent] = useState(false);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-status-expired border-status-expired/30 bg-status-expired/10';
      case 'medium': return 'text-status-expiring border-status-expiring/30 bg-status-expiring/10';
      case 'low': return 'text-status-fresh border-status-fresh/30 bg-status-fresh/10';
      default: return 'text-foreground';
    }
  };

  const totalEstimated = groceryList.reduce((sum, item) => 
    sum + (item.estimatedPrice ? parseFloat(item.estimatedPrice.replace('$', '')) : 0), 0
  );

  const handleSendToStore = () => {
    setIsGenerating(true);
    setTimeout(() => {
      setIsGenerating(false);
      setIsSent(true);
      setTimeout(() => setIsSent(false), 3000);
    }, 2000);
  };

  return (
    <Card className="bg-gradient-card border-border/50 shadow-glow transition-all duration-300 hover:shadow-neon">
      <div className="p-6">
        {/* Header */}
        <div className="flex items-center gap-3 mb-6">
          <div className="p-2 rounded-lg bg-neon-cyan/20 animate-glow-pulse">
            <Bot className="h-6 w-6 text-neon-cyan" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-foreground">AI Grocery List</h2>
            <p className="text-muted-foreground">Generated by Karen</p>
          </div>
        </div>

        {/* AI Generation Status */}
        <div className="mb-6 p-4 rounded-lg bg-muted/20 border border-neon-cyan/30">
          <div className="flex items-center gap-2 mb-2">
            <Bot className="h-4 w-4 text-neon-cyan" />
            <span className="text-sm font-medium text-foreground">Karen's Analysis</span>
          </div>
          <p className="text-sm text-muted-foreground">
            Based on your smart fridge and kitchen scan, I've identified {groceryList.length} items needed for your household, 
            including {groceryList.filter(item => item.forRon).length} special items for Ron.
          </p>
        </div>

        {/* Grocery Items */}
        <div className="space-y-3 mb-6 max-h-80 overflow-y-auto">
          {groceryList.map((item) => (
            <div
              key={item.id}
              className="group relative p-3 rounded-lg bg-card/50 border border-border/30 hover:border-neon-cyan/50 transition-all duration-300"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <h4 className="font-medium text-foreground group-hover:text-neon-cyan transition-colors">
                      {item.name}
                    </h4>
                    {item.forRon && (
                      <Badge variant="outline" className="text-xs px-2 py-0 bg-neon-pink/10 text-neon-pink border-neon-pink/30">
                        <Baby className="h-3 w-3 mr-1" />
                        For Ron
                      </Badge>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground mb-2">{item.reason}</p>
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="text-xs">
                      {item.category}
                    </Badge>
                    <div className={`px-2 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(item.priority)}`}>
                      {item.priority.toUpperCase()}
                    </div>
                  </div>
                </div>
                {item.estimatedPrice && (
                  <div className="text-right">
                    <div className="text-sm font-mono text-foreground">{item.estimatedPrice}</div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Summary */}
        <div className="p-4 rounded-lg bg-muted/20 border border-border/30 mb-6">
          <div className="flex justify-between items-center">
            <div>
              <div className="text-sm text-muted-foreground">Total Items</div>
              <div className="text-lg font-bold text-foreground">{groceryList.length}</div>
            </div>
            <div>
              <div className="text-sm text-muted-foreground">Estimated Total</div>
              <div className="text-lg font-bold text-neon-cyan">${totalEstimated.toFixed(2)}</div>
            </div>
            <div>
              <div className="text-sm text-muted-foreground">For Ron</div>
              <div className="text-lg font-bold text-neon-pink">
                {groceryList.filter(item => item.forRon).length}
              </div>
            </div>
          </div>
        </div>

        {/* Send to Store Button */}
        <Button
          onClick={handleSendToStore}
          disabled={isGenerating || isSent}
          className="w-full bg-gradient-primary hover:shadow-neon transition-all duration-300 text-white font-medium mb-3"
        >
          {isGenerating ? (
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 animate-spin" />
              Sending to Store...
            </div>
          ) : isSent ? (
            <div className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              Sent Successfully!
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Send className="h-4 w-4" />
              Send to Preferred Store
            </div>
          )}
        </Button>

        {/* Order Online Button */}
        <Button
          onClick={() => {/* Handle online order */}}
          className="w-full bg-neon-purple/20 hover:bg-neon-purple/30 border border-neon-purple/50 hover:shadow-purple transition-all duration-300 text-neon-purple font-medium"
        >
          <div className="flex items-center gap-2">
            <CheckCircle className="h-4 w-4" />
            Order Online
          </div>
        </Button>

        {isSent && (
          <div className="mt-3 p-3 rounded-lg bg-status-fresh/10 border border-status-fresh/30">
            <p className="text-sm text-status-fresh text-center">
              ✨ List sent to FreshMart 2035 • Estimated delivery: 45 minutes
            </p>
          </div>
        )}
      </div>
    </Card>
  );
};